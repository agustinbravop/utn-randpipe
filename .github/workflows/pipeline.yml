name: Integration and Deployment
on: [push, pull_request]

jobs:
  formatting:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Make sure the actual branch is checked out when running on pull requests
          ref: ${{ github.head_ref }}
          # This is important to fetch the changes to the previous commit
          fetch-depth: 0

      # Ejecuta Prettier para formatear el código del commit.
      - name: Format code
        # Ref: https://github.com/marketplace/actions/prettier-action
        uses: creyD/prettier_action@v4.3
        with:
          # Prettier CLI options: https://prettier.io/docs/en/cli
          prettier_options: --write . --ignore-path .prettierignore
          same_commit: True
          only_changed: True
          prettier_plugins: prettier-plugin-svelte

  integration:
    runs-on: ubuntu-latest
    needs: formatting

    steps:
      # 1. Checkout de la rama para poder acceder al código.
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Instala `npm` y `node` para poder instalar dependencias y ejecutar código JavaScript.
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # 3. Instala las dependencias del proyecto en `/node_modules`.
      # NPM es el package manager predominante en el ecosistema de NodeJS.
      - name: Install dependencies
        run: npm install

      # 4. Se construye la app para validar que compila correctamente.
      # Nota: Como esto es Svelte (JS + CSS + HTML), no es necesario
      # hacer la build para hacer format, lint o test.
      - name: Build
        run: npm run build

      # 5. ESLint inspecciona el código para verificar que se cumplan
      # ciertos estándares de código, mejorando la calidad.
      - name: Code inspection
        run: npm run lint

        # 6. Vitest ejecuta las pruebas unitarias y de componente.
      # Esto utiliza `jsdom` como entorno (minimalista) de browser.
      - name: Tests
        run: npm run test

  containerization:
    needs: integration
    runs-on: ubuntu-latest

    env:
      # Variable de entorno para el Container registry domain.
      REGISTRY: ghcr.io
      # Nombre de la Docker image que este workflow crea.
      IMAGE_NAME: ${{ github.repository }}

    # Permisos del `GITHUB_TOKEN` para las actions de este job.
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 7. Docker permite containerizar la app para luego ser deployada.
      # Se publica la imagen del container a GitHub Packages.
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ secrets.AzureAppService_ContainerUsername_508afb725d9146b99a1626684b48a89e }}/${{ github.repository_owner }}/${{ github.repository }}:${{ github.sha }}
          file: ./Dockerfile

  deployment:
    runs-on: ubuntu-latest
    needs: containerization
    environment:
      name: production
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      # 8. Se instancia la imagen de Docker en un container del cloud de MS Azure.
      # La infraestructura de Azure existe previo a este workflow.
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: randpipe
          slot-name: production
          publish-profile: ${{ secrets.AzureAppService_PublishProfile_2c32490d45c34fbf96e605f1e42ab03b }}
          images: ghcr.io/${{ secrets.AzureAppService_ContainerUsername_508afb725d9146b99a1626684b48a89e }}/${{ github.repository_owner }}/${{ github.repository }}:${{ github.sha }}
