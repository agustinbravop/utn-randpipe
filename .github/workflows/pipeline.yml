name: Integration
on: [pull_request]

jobs:
  integration:
    runs-on: ubuntu-latest

    steps:
      # Checkout de la rama para poder acceder al código.
      - name: Checkout
        uses: actions/checkout@v4

      # Instala `npm` y `node` para poder gestionar dependencias y ejecutar código JavaScript.
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # NPM es el package manager predominante en el ecosistema de NodeJS.
      # Instala las dependencias del proyecto en `/node_modules`.
      - name: Install dependencies
        run: npm install

      # ESLint inspecciona el código forzándolo a cumplir ciertas reglas de calidad.
      # Prettier verifica que el formato del código se adhiera a la guía de estilos configurada.
      # `svelte-check` hace un diagnóstico de CSS no utilizado y errores de compilador.
      - name: Code inspection
        run: npm run check && npm run lint

      # Vitest ejecuta las pruebas unitarias y de componente.
      # Algunas pruebas utilizan `jsdom` como entorno (minimalista) de browser.
      # Hace un reporte de coverage que solo es informativo, no invalida la build.
      - name: Tests
        run: npm run coverage

      # Se construye la app para validar que se compila correctamente.
      # Nota: Como esto es JS + CSS + HTML, los pasos previos no necesitan una build.
      - name: Build
        run: npm run build

  containerization:
    needs: integration
    runs-on: ubuntu-latest

    env:
      # Variable de entorno para el container registry domain.
      REGISTRY: ghcr.io
      # Nombre de la imagen de docker que este workflow crea.
      IMAGE_NAME: ${{ github.repository }}

    # Permisos del `GITHUB_TOKEN` para las actions de este job.
    permissions:
      contents: read
      packages: write

    steps:
      # Para poder acceder al código en pasos siguientes.
      - name: Checkout code
        uses: actions/checkout@v4

      # Docker Buildx es un plugin que extiende el comando `docker build` de la CLI de Docker.
      # Ref: https://github.com/docker/setup-buildx-action/tree/v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Docker permite containerizar la app para luego ser deployada.
      # Se publica la imagen del container a GitHub Packages.
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see https://github.com/docker/build-push-action#usage.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ github.sha }}
          file: ./Dockerfile

  deployment:
    runs-on: ubuntu-latest
    needs: containerization

    environment:
      name: production
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      # Se instancia la imagen de Docker en un container del cloud de Microsoft Azure.
      # La infraestructura de Azure existe previamente a la ejecución de este workflow.
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: randpipe
          slot-name: production
          publish-profile: ${{ secrets.AzureAppService_PublishProfile_2c32490d45c34fbf96e605f1e42ab03b }}
          images: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ github.sha }}

  feedback:
    needs: [integration, containerization, deployment]
    if: always()
    runs-on: ubuntu-latest
    env:
      PR_URL: "https://${{ github.server_url }}/${{ github.repository_owner }}/${{ github.repository }}/pull/${{ github.event.number }}"
      PR_NUMBER: ${{ github.event.number }}
      SOURCE_BRANCH: ${{ github.head_ref || github.ref_name }}
      DESTINATION_BRANCH: ${{ github.base_ref }}
      HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}

    steps:
      # Para poder acceder a datos del repositorio en el paso siguiente.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Logging
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      # Envía un mensaje a un canal de Slack mediante una "Slack App" preconfigurada.
      # El workspace de Slack existe previamente a la ejecución de este workflow.
      # Ref: https://github.com/marketplace/actions/slack-notify
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          # Enviar mensajes en el canal #pipeline.
          SLACK_CHANNEL: pipeline
          # Autorizado como una Slack App.
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          # Incluir el Actions URL y commit (y omitir Ref y Event).
          MSG_MINIMAL: actions url,commit
          # Determina si la acción fue un 'success' o un 'failure' y el color verde o rojo asociado.
          SLACK_COLOR: ${{ contains(needs.*.result, 'failure') && 'failure' || 'success' }}
          # Mensaje personalizado para una ejecución con éxito.
          SLACK_MESSAGE_ON_SUCCESS: "\n✅ Pipeline *succeded* on pull request <${{ env.PR_URL }}|${{ env.PR_NUMBER }}> from branch `${{ env.SOURCE_BRANCH }}` to branch `${{ env.DESTINATION_BRANCH }}`.\n*Head commit message*: ${{ env.HEAD_COMMIT_MESSAGE }}"
          # Mensaje personalizado para una ejecución sin éxito.
          SLACK_MESSAGE_ON_FAILURE: "\n⛔ Pipeline *failed*! on pull request <${{ env.PR_URL }}|${{ env.PR_NUMBER }}> from branch `${{ env.SOURCE_BRANCH }}` to branch `${{ env.DESTINATION_BRANCH }}`.\n*Head commit message*: ${{ env.HEAD_COMMIT_MESSAGE }}"
          # Para usar `\` en los mensajes.
          ENABLE_ESCAPES: true
