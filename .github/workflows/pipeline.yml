name: Integration and Deployment
on: [push, pull_request]

jobs:
  integration:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout de la rama para poder acceder al código.
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Instala `npm` y `node` para poder instalar dependencias y ejecutar código JavaScript.
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # 3. Instala las dependencias del proyecto en `/node_modules`.
      # NPM es el package manager predominante en el ecosistema de NodeJS.
      - name: Install dependencies
        run: npm install

      # 4. Se construye la app para validar que compila correctamente.
      # Nota: Como esto es Svelte (JS + CSS + HTML), no es necesario
      # hacer la build para hacer format, lint o test.
      - name: Build
        run: npm run build

      # 5. ESLint inspecciona el código para verificar que se cumplan
      # ciertos estándares de código, mejorando la calidad.
      - name: Code inspection
        run: npm run lint

        # 6. Vitest ejecuta las pruebas unitarias y de componente.
      # Esto utiliza `jsdom` como entorno (minimalista) de browser.
      - name: Tests
        run: npm run test

  deployment:
    needs: integration
    runs-on: ubuntu-latest
    env:
      # Variable de entorno para el Container registry domain.
      REGISTRY: ghcr.io
      # Nombre de la Docker image que este workflow crea.
      IMAGE_NAME: ${{ github.repository }}

    # Permisos del `GITHUB_TOKEN` para las actions de este job.
    permissions:
      contents: read
      packages: write

    steps:
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: metadata
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # 7. Docker permite containerizar la app para luego ser deployada.
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
